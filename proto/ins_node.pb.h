// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ins_node.proto

#ifndef PROTOBUF_ins_5fnode_2eproto__INCLUDED
#define PROTOBUF_ins_5fnode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace galaxy {
namespace ins {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ins_5fnode_2eproto();
void protobuf_AssignDesc_ins_5fnode_2eproto();
void protobuf_ShutdownFile_ins_5fnode_2eproto();

class Entry;
class AppendEntriesRequest;
class AppendEntriesResponse;
class VoteRequest;
class VoteResponse;
class PutRequest;
class PutResponse;
class GetRequest;
class GetResponse;

// ===================================================================

class Entry : public ::google::protobuf::Message {
 public:
  Entry();
  virtual ~Entry();
  
  Entry(const Entry& from);
  
  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();
  
  void Swap(Entry* other);
  
  // implements Message ----------------------------------------------
  
  Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.Entry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesRequest : public ::google::protobuf::Message {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();
  
  AppendEntriesRequest(const AppendEntriesRequest& from);
  
  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequest& default_instance();
  
  void Swap(AppendEntriesRequest* other);
  
  // implements Message ----------------------------------------------
  
  AppendEntriesRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required string leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline const ::std::string& leader_id() const;
  inline void set_leader_id(const ::std::string& value);
  inline void set_leader_id(const char* value);
  inline void set_leader_id(const char* value, size_t size);
  inline ::std::string* mutable_leader_id();
  inline ::std::string* release_leader_id();
  
  // required int64 prev_log_index = 3;
  inline bool has_prev_log_index() const;
  inline void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  inline ::google::protobuf::int64 prev_log_index() const;
  inline void set_prev_log_index(::google::protobuf::int64 value);
  
  // required int64 prev_log_term = 4;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  inline ::google::protobuf::int64 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::int64 value);
  
  // required int64 leader_commit_index = 5;
  inline bool has_leader_commit_index() const;
  inline void clear_leader_commit_index();
  static const int kLeaderCommitIndexFieldNumber = 5;
  inline ::google::protobuf::int64 leader_commit_index() const;
  inline void set_leader_commit_index(::google::protobuf::int64 value);
  
  // repeated .galaxy.ins.Entry entries = 6;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 6;
  inline const ::galaxy::ins::Entry& entries(int index) const;
  inline ::galaxy::ins::Entry* mutable_entries(int index);
  inline ::galaxy::ins::Entry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::galaxy::ins::Entry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::galaxy::ins::Entry >*
      mutable_entries();
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.AppendEntriesRequest)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_prev_log_index();
  inline void clear_has_prev_log_index();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_leader_commit_index();
  inline void clear_has_leader_commit_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  ::std::string* leader_id_;
  ::google::protobuf::int64 prev_log_index_;
  ::google::protobuf::int64 prev_log_term_;
  ::google::protobuf::int64 leader_commit_index_;
  ::google::protobuf::RepeatedPtrField< ::galaxy::ins::Entry > entries_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static AppendEntriesRequest* default_instance_;
};
// -------------------------------------------------------------------

class AppendEntriesResponse : public ::google::protobuf::Message {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();
  
  AppendEntriesResponse(const AppendEntriesResponse& from);
  
  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponse& default_instance();
  
  void Swap(AppendEntriesResponse* other);
  
  // implements Message ----------------------------------------------
  
  AppendEntriesResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 current_term = 1;
  inline bool has_current_term() const;
  inline void clear_current_term();
  static const int kCurrentTermFieldNumber = 1;
  inline ::google::protobuf::int64 current_term() const;
  inline void set_current_term(::google::protobuf::int64 value);
  
  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.AppendEntriesResponse)
 private:
  inline void set_has_current_term();
  inline void clear_has_current_term();
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 current_term_;
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static AppendEntriesResponse* default_instance_;
};
// -------------------------------------------------------------------

class VoteRequest : public ::google::protobuf::Message {
 public:
  VoteRequest();
  virtual ~VoteRequest();
  
  VoteRequest(const VoteRequest& from);
  
  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteRequest& default_instance();
  
  void Swap(VoteRequest* other);
  
  // implements Message ----------------------------------------------
  
  VoteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteRequest& from);
  void MergeFrom(const VoteRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required string candidate_id = 2;
  inline bool has_candidate_id() const;
  inline void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  inline const ::std::string& candidate_id() const;
  inline void set_candidate_id(const ::std::string& value);
  inline void set_candidate_id(const char* value);
  inline void set_candidate_id(const char* value, size_t size);
  inline ::std::string* mutable_candidate_id();
  inline ::std::string* release_candidate_id();
  
  // required int64 last_log_index = 3;
  inline bool has_last_log_index() const;
  inline void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  inline ::google::protobuf::int64 last_log_index() const;
  inline void set_last_log_index(::google::protobuf::int64 value);
  
  // required int64 last_log_term = 4;
  inline bool has_last_log_term() const;
  inline void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  inline ::google::protobuf::int64 last_log_term() const;
  inline void set_last_log_term(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.VoteRequest)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_candidate_id();
  inline void clear_has_candidate_id();
  inline void set_has_last_log_index();
  inline void clear_has_last_log_index();
  inline void set_has_last_log_term();
  inline void clear_has_last_log_term();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  ::std::string* candidate_id_;
  ::google::protobuf::int64 last_log_index_;
  ::google::protobuf::int64 last_log_term_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static VoteRequest* default_instance_;
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message {
 public:
  VoteResponse();
  virtual ~VoteResponse();
  
  VoteResponse(const VoteResponse& from);
  
  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();
  
  void Swap(VoteResponse* other);
  
  // implements Message ----------------------------------------------
  
  VoteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int64 term() const;
  inline void set_term(::google::protobuf::int64 value);
  
  // required bool vote_granted = 2;
  inline bool has_vote_granted() const;
  inline void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  inline bool vote_granted() const;
  inline void set_vote_granted(bool value);
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.VoteResponse)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_vote_granted();
  inline void clear_has_vote_granted();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 term_;
  bool vote_granted_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static VoteResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message {
 public:
  PutRequest();
  virtual ~PutRequest();
  
  PutRequest(const PutRequest& from);
  
  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();
  
  void Swap(PutRequest* other);
  
  // implements Message ----------------------------------------------
  
  PutRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.PutRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message {
 public:
  PutResponse();
  virtual ~PutResponse();
  
  PutResponse(const PutResponse& from);
  
  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();
  
  void Swap(PutResponse* other);
  
  // implements Message ----------------------------------------------
  
  PutResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.PutResponse)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool success_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();
  
  GetRequest(const GetRequest& from);
  
  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();
  
  void Swap(GetRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.GetRequest)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();
  
  GetResponse(const GetResponse& from);
  
  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();
  
  void Swap(GetResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool hit = 1;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 1;
  inline bool hit() const;
  inline void set_hit(bool value);
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:galaxy.ins.GetResponse)
 private:
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  bool hit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ins_5fnode_2eproto();
  friend void protobuf_AssignDesc_ins_5fnode_2eproto();
  friend void protobuf_ShutdownFile_ins_5fnode_2eproto();
  
  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// ===================================================================

class InsNode_Stub;

class InsNode : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline InsNode() {};
 public:
  virtual ~InsNode();
  
  typedef InsNode_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void AppendEntries(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::AppendEntriesRequest* request,
                       ::galaxy::ins::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Vote(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::VoteRequest* request,
                       ::galaxy::ins::VoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Put(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::PutRequest* request,
                       ::galaxy::ins::PutResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::GetRequest* request,
                       ::galaxy::ins::GetResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InsNode);
};

class InsNode_Stub : public InsNode {
 public:
  InsNode_Stub(::google::protobuf::RpcChannel* channel);
  InsNode_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~InsNode_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements InsNode ------------------------------------------
  
  void AppendEntries(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::AppendEntriesRequest* request,
                       ::galaxy::ins::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  void Vote(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::VoteRequest* request,
                       ::galaxy::ins::VoteResponse* response,
                       ::google::protobuf::Closure* done);
  void Put(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::PutRequest* request,
                       ::galaxy::ins::PutResponse* response,
                       ::google::protobuf::Closure* done);
  void Get(::google::protobuf::RpcController* controller,
                       const ::galaxy::ins::GetRequest* request,
                       ::galaxy::ins::GetResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(InsNode_Stub);
};


// ===================================================================


// ===================================================================

// Entry

// required string key = 1;
inline bool Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Entry::key() const {
  return *key_;
}
inline void Entry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Entry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Entry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Entry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Entry::value() const {
  return *value_;
}
inline void Entry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Entry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Entry::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Entry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// required int64 term = 1;
inline bool AppendEntriesRequest::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRequest::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::term() const {
  return term_;
}
inline void AppendEntriesRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required string leader_id = 2;
inline bool AppendEntriesRequest::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRequest::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesRequest::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesRequest::clear_leader_id() {
  if (leader_id_ != &::google::protobuf::internal::kEmptyString) {
    leader_id_->clear();
  }
  clear_has_leader_id();
}
inline const ::std::string& AppendEntriesRequest::leader_id() const {
  return *leader_id_;
}
inline void AppendEntriesRequest::set_leader_id(const ::std::string& value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void AppendEntriesRequest::set_leader_id(const char* value) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(value);
}
inline void AppendEntriesRequest::set_leader_id(const char* value, size_t size) {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  leader_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendEntriesRequest::mutable_leader_id() {
  set_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    leader_id_ = new ::std::string;
  }
  return leader_id_;
}
inline ::std::string* AppendEntriesRequest::release_leader_id() {
  clear_has_leader_id();
  if (leader_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_id_;
    leader_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 prev_log_index = 3;
inline bool AppendEntriesRequest::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesRequest::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_index() const {
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::int64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
}

// required int64 prev_log_term = 4;
inline bool AppendEntriesRequest::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesRequest::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_term() const {
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::int64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// required int64 leader_commit_index = 5;
inline bool AppendEntriesRequest::has_leader_commit_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendEntriesRequest::set_has_leader_commit_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppendEntriesRequest::clear_has_leader_commit_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppendEntriesRequest::clear_leader_commit_index() {
  leader_commit_index_ = GOOGLE_LONGLONG(0);
  clear_has_leader_commit_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::leader_commit_index() const {
  return leader_commit_index_;
}
inline void AppendEntriesRequest::set_leader_commit_index(::google::protobuf::int64 value) {
  set_has_leader_commit_index();
  leader_commit_index_ = value;
}

// repeated .galaxy.ins.Entry entries = 6;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline const ::galaxy::ins::Entry& AppendEntriesRequest::entries(int index) const {
  return entries_.Get(index);
}
inline ::galaxy::ins::Entry* AppendEntriesRequest::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::galaxy::ins::Entry* AppendEntriesRequest::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::galaxy::ins::Entry >&
AppendEntriesRequest::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::galaxy::ins::Entry >*
AppendEntriesRequest::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// required int64 current_term = 1;
inline bool AppendEntriesResponse::has_current_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponse::set_has_current_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesResponse::clear_has_current_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesResponse::clear_current_term() {
  current_term_ = GOOGLE_LONGLONG(0);
  clear_has_current_term();
}
inline ::google::protobuf::int64 AppendEntriesResponse::current_term() const {
  return current_term_;
}
inline void AppendEntriesResponse::set_current_term(::google::protobuf::int64 value) {
  set_has_current_term();
  current_term_ = value;
}

// required bool success = 2;
inline bool AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntriesResponse::success() const {
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// VoteRequest

// required int64 term = 1;
inline bool VoteRequest::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteRequest::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 VoteRequest::term() const {
  return term_;
}
inline void VoteRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required string candidate_id = 2;
inline bool VoteRequest::has_candidate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteRequest::set_has_candidate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteRequest::clear_has_candidate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteRequest::clear_candidate_id() {
  if (candidate_id_ != &::google::protobuf::internal::kEmptyString) {
    candidate_id_->clear();
  }
  clear_has_candidate_id();
}
inline const ::std::string& VoteRequest::candidate_id() const {
  return *candidate_id_;
}
inline void VoteRequest::set_candidate_id(const ::std::string& value) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(value);
}
inline void VoteRequest::set_candidate_id(const char* value) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(value);
}
inline void VoteRequest::set_candidate_id(const char* value, size_t size) {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  candidate_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VoteRequest::mutable_candidate_id() {
  set_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    candidate_id_ = new ::std::string;
  }
  return candidate_id_;
}
inline ::std::string* VoteRequest::release_candidate_id() {
  clear_has_candidate_id();
  if (candidate_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = candidate_id_;
    candidate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 last_log_index = 3;
inline bool VoteRequest::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VoteRequest::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VoteRequest::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VoteRequest::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 VoteRequest::last_log_index() const {
  return last_log_index_;
}
inline void VoteRequest::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
}

// required int64 last_log_term = 4;
inline bool VoteRequest::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VoteRequest::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VoteRequest::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VoteRequest::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::int64 VoteRequest::last_log_term() const {
  return last_log_term_;
}
inline void VoteRequest::set_last_log_term(::google::protobuf::int64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
}

// -------------------------------------------------------------------

// VoteResponse

// required int64 term = 1;
inline bool VoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VoteResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 VoteResponse::term() const {
  return term_;
}
inline void VoteResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
}

// required bool vote_granted = 2;
inline bool VoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VoteResponse::set_has_vote_granted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VoteResponse::clear_has_vote_granted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  clear_has_vote_granted();
}
inline bool VoteResponse::vote_granted() const {
  return vote_granted_;
}
inline void VoteResponse::set_vote_granted(bool value) {
  set_has_vote_granted();
  vote_granted_ = value;
}

// -------------------------------------------------------------------

// PutRequest

// required string key = 1;
inline bool PutRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PutRequest::key() const {
  return *key_;
}
inline void PutRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PutRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PutRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PutRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PutRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool PutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRequest::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PutRequest::value() const {
  return *value_;
}
inline void PutRequest::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PutRequest::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PutRequest::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PutRequest::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PutRequest::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PutResponse

// required bool success = 1;
inline bool PutResponse::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutResponse::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool PutResponse::success() const {
  return success_;
}
inline void PutResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// GetRequest

// required string key = 1;
inline bool GetRequest::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRequest::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& GetRequest::key() const {
  return *key_;
}
inline void GetRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GetRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GetRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* GetRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetResponse

// required bool hit = 1;
inline bool GetResponse::has_hit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetResponse::set_has_hit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetResponse::clear_has_hit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetResponse::clear_hit() {
  hit_ = false;
  clear_has_hit();
}
inline bool GetResponse::hit() const {
  return hit_;
}
inline void GetResponse::set_hit(bool value) {
  set_has_hit();
  hit_ = value;
}

// required string value = 2;
inline bool GetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetResponse::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& GetResponse::value() const {
  return *value_;
}
inline void GetResponse::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GetResponse::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GetResponse::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetResponse::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* GetResponse::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ins
}  // namespace galaxy

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ins_5fnode_2eproto__INCLUDED
